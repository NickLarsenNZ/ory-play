version: '3.9'

# Based on: https://www.ory.sh/run-oauth2-server-open-source-api-security/

services:

  postgres:
    image: postgres:9.6
    environment:
      - POSTGRES_USER=hydra
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=hydra
    networks:
      - ory

  # hydra_migrate:
  #   init: true
  #   depends_on:
  #     - postgres
  #   image: oryd/hydra:v1.10.2
  #   environment:
  #     - DSN=postgres://hydra:secret@postgres:5432/hydra?sslmode=disable
  #   command:
  #     - migrate
  #     - sql
  #     - --yes
  #     - --read-from-env
  #   networks:
  #     - ory

  hydra:
    image: oryd/hydra:v1.10.2
    environment:
      - DSN=postgres://hydra:secret@postgres:5432/hydra?sslmode=disable
      - SECRETS_SYSTEM=1E922sIUu90WPjnW8bRrVBY6BcGMy4qP # export LC_CTYPE=C; cat /dev/urandom | gtr -dc 'a-zA-Z0-9' | gfold -w 32 | ghead -n 1
      - URLS_SELF_ISSUER=http://127.0.0.1:9000/
      # we end up running a consent service for both login and consent, see: hydra_consent_demo further down
      - URLS_CONSENT=http://127.0.0.1:9020/consent
      - URLS_LOGIN=http://127.0.0.1:9020/login
    command:
      - serve
      - all
      - --dangerous-force-http
    networks:
      - ory
    ports:
      - 9000:4444
      - 9001:4445 # curl -s http://127.0.0.1:9001/health/ready -> {"status":"ok"}

  hydra_consent_demo:
    image: oryd/hydra-login-consent-node:v1.10.2
    environment:
      - HYDRA_ADMIN_URL=http://hydra:4445
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    networks:
      - ory
    ports:
      - 9020:3000

networks:
  ory:
